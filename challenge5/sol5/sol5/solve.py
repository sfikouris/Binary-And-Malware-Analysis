import angr
import claripy


    
def solve():

    p = angr.Project('./alrost')

    input_word = claripy.BVS('input_word',640)
    
    marklar = claripy.BVS('marklar',448)

    state = p.factory.call_state(0x4011d0,input_word,0x54)

    for i in range(80):
        state.solver.add ( claripy.Or(input_word.get_byte(i) == 0,input_word.get_byte(i) == 1))

    found=state
    for x in range(10):
        sim = p.factory.simgr(found)
        sim.step()
        sim.explore(find=0x4011fb)
        sim.move(from_stash='found',to_stash='active')
        sim.merge()
        sim.explore(find=0x401204)
        sim.move(from_stash='found',to_stash='active')
        sim.merge()
        sim.explore(find=0x40120d)
        sim.move(from_stash='found',to_stash='active')
        sim.merge()
        sim.explore(find=0x401216)
        sim.move(from_stash='found',to_stash='active')
        sim.merge()
        sim.explore(find=0x40121f)
        sim.move(from_stash='found',to_stash='active')
        sim.merge()
        sim.explore(find=0x401228)
        sim.move(from_stash='found',to_stash='active')
        sim.merge()
        sim.explore(find=0x401231)
        sim.move(from_stash='found',to_stash='active')
        sim.merge()
        sim.explore(find=0x401247)
        sim.move(from_stash='found',to_stash='active')
        sim.merge()
        found = sim.active[0]
        

    sim = p.factory.simgr(found)
    sim.explore(find=0x40124c)
    found=sim.found[0]
    found.add_constraints( found.regs.al == 0 )


    
    state = p.factory.call_state(0x4046d0,marklar,input_word)

    for i in found.solver.constraints: 
        state.add_constraints(i)
    
    for i in range(56):
        state.solver.add ( claripy.Or(marklar.get_byte(i) == 0,marklar.get_byte(i) == 1))

    found = state

    for fun in range(56): 
        sim = p.factory.simgr(found)
        sim.step()  
        sim.explore(find=0x4046f9)
        found = sim.found[0]
        found.add_constraints(claripy.Or(marklar.get_byte(fun)==found.regs.al))


    sim = p.factory.simgr(found)
    sim.explore(find=0x404707)
    found = sim.found[0]

    while(found.solver.satisfiable()):
        m = found.solver.eval(marklar)
        print(found.solver.eval(input_word))
        print(m)
        found.add_constraints(marklar != m)
        #import IPython; IPython.embed()

       
def main():
    solve()



if __name__ == "__main__":
        main()


